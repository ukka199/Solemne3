//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace WebPrueba.Net.PruebaServicioWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PruebaServicioWCF.IPruebaServicio")]
    public interface IPruebaServicio {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPruebaServicio/Modulo", ReplyAction="http://tempuri.org/IPruebaServicio/ModuloResponse")]
        int Modulo(int value1, int value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPruebaServicio/Modulo", ReplyAction="http://tempuri.org/IPruebaServicio/ModuloResponse")]
        System.Threading.Tasks.Task<int> ModuloAsync(int value1, int value2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPruebaServicioChannel : WebPrueba.Net.PruebaServicioWCF.IPruebaServicio, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PruebaServicioClient : System.ServiceModel.ClientBase<WebPrueba.Net.PruebaServicioWCF.IPruebaServicio>, WebPrueba.Net.PruebaServicioWCF.IPruebaServicio {
        
        public PruebaServicioClient() {
        }
        
        public PruebaServicioClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PruebaServicioClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PruebaServicioClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PruebaServicioClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public float Modulo(int value1, int value2) {
            return base.Channel.Modulo(value1, value2);
        }
        
        public System.Threading.Tasks.Task<int> ModuloAsync(int value1, int value2) {
            return base.Channel.ModuloAsync(value1, value2);
        }

        int IPruebaServicio.Modulo(int value1, int value2)
        {
            if (Math.Abs(value1) >= Math.Abs(value2))
            {
                if (value2 == 0)
                {
                    return -1;
                }
                else
                {
                    return value1 % value2;
                }
            }
            else
            {
                if (value1 == 0)
                {
                    return -1;
                }
                else
                {
                    return value2 % value1;
                }
            }
        }
    }
}
